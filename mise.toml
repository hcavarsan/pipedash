[tools]
"rust" = { version = "nightly", components = "rust-src,llvm-tools" }
cargo = "latest"
node = "24"
bun = "latest"
"cargo:cargo-llvm-cov" = "latest"
"cargo:cargo-nextest" = "latest"
"cargo:cargo-insta" = "latest"
"cargo:tauri-cli" = "latest"

[tasks.install]
description = "Install all dependencies"
depends = ["install:front"]

[tasks."install:front"]
description = "Install frontend dependencies"
run = "bun install"

[tasks.dev]
description = "Start full Tauri development mode"
run = "bun run tauri dev"

[tasks.ui]
description = "Start frontend development server only"
run = "bunx vite"

[tasks.build]
description = "Build full Tauri application for production"
run = "bun run tauri build"

[tasks."build:front"]
description = "Build frontend only"
run = "bunx tsc && bunx vite build"

[tasks."build:back"]
description = "Build backend only"
run = "cargo build --release --workspace"

[tasks."build:analyze"]
description = "Build frontend with bundle analysis"
run = "ANALYZE=true bunx tsc && bunx vite build"

[tasks.check]
description = "Run all type and syntax checking"
depends = ["check:front", "check:back"]

[tasks."check:front"]
description = "Run frontend TypeScript type checking"
run = "bunx tsc --noEmit"

[tasks."check:back"]
description = "Run backend cargo check"
run = "cargo check --workspace --all-targets --all-features"

[tasks.lint]
description = "Lint frontend and backend code"
depends = ["lint:front", "lint:back"]

[tasks."lint:front"]
description = "Lint frontend code with ESLint"
run = "bunx eslint . --fix"

[tasks."lint:back"]
description = "Lint backend code with Clippy"
run = "cargo clippy --workspace --all-targets --all-features -- -D warnings"

[tasks.format]
description = "Format frontend and backend code"
depends = ["format:front", "format:back"]

[tasks."format:front"]
description = "Format frontend code with ESLint"
run = "bunx eslint . --fix"

[tasks."format:back"]
description = "Format backend code with rustfmt"
run = "rustup run nightly cargo fmt --all"

[tasks."format:check"]
description = "Check formatting without fixing"
depends = ["format:front:check", "format:back:check"]

[tasks."format:front:check"]
description = "Check frontend formatting"
run = "bunx eslint ."

[tasks."format:back:check"]
description = "Check backend formatting"
run = "cargo +nightly fmt --all -- --check"

[tasks.knip]
description = "Detect unused exports and dependencies"
run = "bunx knip"

[tasks."bump:patch"]
description = "Bump patch version and commit"
run = "cd hacks && cargo run --bin bump_version patch && cd .. && cargo update --workspace && git add . && git commit -m 'chore: bump version'"

[tasks."bump:minor"]
description = "Bump minor version and commit"
run = "cd hacks && cargo run --bin bump_version minor && cd .. && cargo update --workspace && git add . && git commit -m 'chore: bump version'"

[tasks."bump:major"]
description = "Bump major version and commit"
run = "cd hacks && cargo run --bin bump_version major && cd .. && cargo update --workspace && git add . && git commit -m 'chore: bump version'"

[tasks.release]
description = "Full release workflow"
run = [
  "mise run format:check",
  "mise run lint",
  "mise run check",
  "mise run build"
]

[tasks.icons]
description = "Generate application icons"
run = "cargo run --bin generate_icons"

[tasks.deps]
description = "Update dependencies to latest major versions"
run = "bunx taze major -I"

[tasks."deps:minor"]
description = "Update dependencies to latest minor versions"
run = "bunx taze minor -w"

[tasks.ci]
description = "Run all CI checks"
depends = ["format:check", "lint", "check"]

[tasks."ci:front"]
description = "Run frontend CI checks"
depends = ["format:front:check", "lint:front", "check:front"]

[tasks."ci:back"]
description = "Run backend CI checks"
depends = ["format:back:check", "lint:back", "check:back"]

[tasks.precommit]
description = "Run pre-commit checks"
run = [
  "mise run format",
  "mise run check:back",
  "git add -u"
]
